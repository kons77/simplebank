// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: transfers.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createTrasfer = `-- name: CreateTrasfer :one

INSERT INTO transfers (
  from_account_id, 
  to_account_id,
  amount
) VALUES (
  $1, $2, $3
) RETURNING id, from_account_id, to_account_id, amount, created_at
`

type CreateTrasferParams struct {
	FromAccountID pgtype.Int8 `json:"from_account_id"`
	ToAccountID   pgtype.Int8 `json:"to_account_id"`
	Amount        int64       `json:"amount"`
}

// https://docs.sqlc.dev/en/latest/tutorials/getting-started-postgresql.html#
func (q *Queries) CreateTrasfer(ctx context.Context, arg CreateTrasferParams) (Transfer, error) {
	row := q.db.QueryRow(ctx, createTrasfer, arg.FromAccountID, arg.ToAccountID, arg.Amount)
	var i Transfer
	err := row.Scan(
		&i.ID,
		&i.FromAccountID,
		&i.ToAccountID,
		&i.Amount,
		&i.CreatedAt,
	)
	return i, err
}

const deleteTrasfer = `-- name: DeleteTrasfer :exec
DELETE FROM transfers
WHERE id = $1
`

func (q *Queries) DeleteTrasfer(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteTrasfer, id)
	return err
}

const getTrasfer = `-- name: GetTrasfer :one
SELECT id, from_account_id, to_account_id, amount, created_at FROM transfers
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetTrasfer(ctx context.Context, id int64) (Transfer, error) {
	row := q.db.QueryRow(ctx, getTrasfer, id)
	var i Transfer
	err := row.Scan(
		&i.ID,
		&i.FromAccountID,
		&i.ToAccountID,
		&i.Amount,
		&i.CreatedAt,
	)
	return i, err
}

const listTrasfers = `-- name: ListTrasfers :many
SELECT id, from_account_id, to_account_id, amount, created_at FROM transfers
ORDER BY id
LIMIT $1 
OFFSET $2
`

type ListTrasfersParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListTrasfers(ctx context.Context, arg ListTrasfersParams) ([]Transfer, error) {
	rows, err := q.db.Query(ctx, listTrasfers, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Transfer{}
	for rows.Next() {
		var i Transfer
		if err := rows.Scan(
			&i.ID,
			&i.FromAccountID,
			&i.ToAccountID,
			&i.Amount,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateATrasferNoReturn = `-- name: UpdateATrasferNoReturn :exec
UPDATE transfers
SET from_account_id =$2, to_account_id = $3, amount = $4
WHERE id = $1
`

type UpdateATrasferNoReturnParams struct {
	ID            int64       `json:"id"`
	FromAccountID pgtype.Int8 `json:"from_account_id"`
	ToAccountID   pgtype.Int8 `json:"to_account_id"`
	Amount        int64       `json:"amount"`
}

func (q *Queries) UpdateATrasferNoReturn(ctx context.Context, arg UpdateATrasferNoReturnParams) error {
	_, err := q.db.Exec(ctx, updateATrasferNoReturn,
		arg.ID,
		arg.FromAccountID,
		arg.ToAccountID,
		arg.Amount,
	)
	return err
}

const updateTrasfer = `-- name: UpdateTrasfer :one
UPDATE transfers
SET from_account_id =$2, to_account_id = $3, amount = $4
WHERE id = $1
RETURNING id, from_account_id, to_account_id, amount, created_at
`

type UpdateTrasferParams struct {
	ID            int64       `json:"id"`
	FromAccountID pgtype.Int8 `json:"from_account_id"`
	ToAccountID   pgtype.Int8 `json:"to_account_id"`
	Amount        int64       `json:"amount"`
}

func (q *Queries) UpdateTrasfer(ctx context.Context, arg UpdateTrasferParams) (Transfer, error) {
	row := q.db.QueryRow(ctx, updateTrasfer,
		arg.ID,
		arg.FromAccountID,
		arg.ToAccountID,
		arg.Amount,
	)
	var i Transfer
	err := row.Scan(
		&i.ID,
		&i.FromAccountID,
		&i.ToAccountID,
		&i.Amount,
		&i.CreatedAt,
	)
	return i, err
}
