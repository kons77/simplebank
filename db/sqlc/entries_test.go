package db

import (
	"context"
	"database/sql"
	"testing"
	"time"

	"github.com/kons77/simplebank/util"

	"github.com/stretchr/testify/require"
)

// ! this test was generated by Claude AI, just for checking how it works

// createRandomEntry creates a random entry for testing
func createRandomEntry(t *testing.T, account Account) Entry {
	arg := CreateEntryParams{
		AccountID: util.ToPgInt8(account.ID),
		Amount:    util.RandomMoney(),
	}

	entry, err := testStore.CreateEntry(context.Background(), arg)
	require.NoError(t, err)
	require.NotEmpty(t, entry)

	require.Equal(t, arg.AccountID.Int64, entry.AccountID.Int64)
	require.Equal(t, arg.Amount, entry.Amount)

	require.NotZero(t, entry.ID)
	require.NotZero(t, entry.CreatedAt)

	return entry
}

func TestCreateEntry(t *testing.T) {
	account := createRandomAccount(t)
	entry := createRandomEntry(t, account)

	// Clean up - first delete the entry, then the account
	err := testStore.DeleteEntry(context.Background(), entry.ID)
	require.NoError(t, err)

	err = testStore.DeleteAccount(context.Background(), account.ID)
	require.NoError(t, err)
}

func TestGetEntry(t *testing.T) {
	// Create account and entry
	account := createRandomAccount(t)
	entry1 := createRandomEntry(t, account)

	// Get the entry
	entry2, err := testStore.GetEntry(context.Background(), entry1.ID)
	require.NoError(t, err)
	require.NotEmpty(t, entry2)

	// Verify all fields match
	require.Equal(t, entry1.ID, entry2.ID)
	require.Equal(t, entry1.AccountID.Int64, entry2.AccountID.Int64)
	require.Equal(t, entry1.Amount, entry2.Amount)
	require.WithinDuration(t, entry1.CreatedAt, entry2.CreatedAt, time.Second)

	// Clean up
	err = testStore.DeleteEntry(context.Background(), entry1.ID)
	require.NoError(t, err)
	err = testStore.DeleteAccount(context.Background(), account.ID)
	require.NoError(t, err)
}

func TestUpdateEntry(t *testing.T) {
	// Create account and entry
	account := createRandomAccount(t)
	entry1 := createRandomEntry(t, account)

	// Create update params
	arg := UpdateEntryParams{
		ID:        entry1.ID,
		AccountID: entry1.AccountID,
		Amount:    util.RandomMoney(), // Update with new amount
	}

	// Update entry
	entry2, err := testStore.UpdateEntry(context.Background(), arg)
	require.NoError(t, err)
	require.NotEmpty(t, entry2)

	// Verify fields
	require.Equal(t, entry1.ID, entry2.ID)
	require.Equal(t, entry1.AccountID.Int64, entry2.AccountID.Int64)
	require.Equal(t, arg.Amount, entry2.Amount) // Amount should be updated
	require.WithinDuration(t, entry1.CreatedAt, entry2.CreatedAt, time.Second)

	// Clean up
	err = testStore.DeleteEntry(context.Background(), entry1.ID)
	require.NoError(t, err)
	err = testStore.DeleteAccount(context.Background(), account.ID)
	require.NoError(t, err)
}

func TestUpdateEntryNoReturn(t *testing.T) {
	// Create account and entry
	account := createRandomAccount(t)
	entry1 := createRandomEntry(t, account)

	// Create update params
	arg := UpdateAEntrieNoReturnParams{
		ID:        entry1.ID,
		AccountID: entry1.AccountID,
		Amount:    util.RandomMoney(), // Update with new amount
	}

	// Update entry without return
	err := testStore.UpdateAEntrieNoReturn(context.Background(), arg)
	require.NoError(t, err)

	// Get the entry to verify update
	entry2, err := testStore.GetEntry(context.Background(), entry1.ID)
	require.NoError(t, err)
	require.NotEmpty(t, entry2)

	// Verify fields
	require.Equal(t, entry1.ID, entry2.ID)
	require.Equal(t, arg.AccountID.Int64, entry2.AccountID.Int64)
	require.Equal(t, arg.Amount, entry2.Amount) // Amount should be updated
	require.WithinDuration(t, entry1.CreatedAt, entry2.CreatedAt, time.Second)

	// Clean up
	err = testStore.DeleteEntry(context.Background(), entry1.ID)
	require.NoError(t, err)
	err = testStore.DeleteAccount(context.Background(), account.ID)
	require.NoError(t, err)
}

func TestDeleteEntry(t *testing.T) {
	// Create account and entry
	account := createRandomAccount(t)
	entry := createRandomEntry(t, account)

	// Delete the entry
	err := testStore.DeleteEntry(context.Background(), entry.ID)
	require.NoError(t, err)

	// Try to get the deleted entry
	deletedEntry, err := testStore.GetEntry(context.Background(), entry.ID)
	require.Error(t, err)
	require.ErrorIs(t, err, sql.ErrNoRows)
	require.Empty(t, deletedEntry)

	// Clean up the account
	err = testStore.DeleteAccount(context.Background(), account.ID)
	require.NoError(t, err)
}

func TestListEntries(t *testing.T) {
	// Create random account
	account := createRandomAccount(t)

	// Create 10 random entries for the account
	n := 10
	var createdEntries []Entry
	for i := 0; i < n; i++ {
		entry := createRandomEntry(t, account)
		createdEntries = append(createdEntries, entry)
	}

	// List entries with pagination
	arg := ListEntriesParams{
		AccountID: util.ToPgInt8(account.ID),
		Limit:     5,
		Offset:    5,
	}

	entries, err := testStore.ListEntries(context.Background(), arg)
	require.NoError(t, err)
	require.Len(t, entries, 5)

	// Verify that all entries are not empty
	for _, entry := range entries {
		require.NotEmpty(t, entry)
		require.Equal(t, account.ID, entry.AccountID.Int64)
	}

	// Clean up all entries first
	for _, entry := range createdEntries {
		err = testStore.DeleteEntry(context.Background(), entry.ID)
		require.NoError(t, err)
	}

	// Then clean up the account
	err = testStore.DeleteAccount(context.Background(), account.ID)
	require.NoError(t, err)
}

func TestListEntriesEmpty(t *testing.T) {
	// Create an account with no entries
	account := createRandomAccount(t)

	// List entries for account that has no entries
	arg := ListEntriesParams{
		AccountID: util.ToPgInt8(account.ID),
		Limit:     5,
		Offset:    0,
	}

	entries, err := testStore.ListEntries(context.Background(), arg)
	require.NoError(t, err)
	require.Empty(t, entries)

	// Clean up the account
	err = testStore.DeleteAccount(context.Background(), account.ID)
	require.NoError(t, err)
}
